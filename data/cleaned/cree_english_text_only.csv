Cree,English
acahkosak,stars
achimēwak,they are telling a story about him
achimoh,tell a story
achimostamawâw,a story is told to him/her
achimostaw,tell him a story
achimostawāw,he is told a story
achimostawēw,she is telling him/them a story
achimostawēwak,they are telling him/them a story
achimostawihk,all of you tell him a story
achimostawik,all of you tell me a story
achimostawin,tell me a story
achimostawinan,tell us a story
achimâw,a story is told about him
achiwinam,he shrinks it with his hands
achiwpayin,it shrunk
achiwpayin,it shrinks
achiwīpayiw,he shrinks
acim,tell about him
acimosisak,puppies
acosis,arrow
acoskewinisa,small chores
acoskēwinis,a small chore
ahāw,a reply indicating agreement
ahcanis,a ring
ahcānisak,rings for the finger
ahchi,a change in time/movement/place
ahchipiko,nevertheless
ahēw,he placed him
ahēwak,they placed him/them there
ahih,place him
ahihk,all of you put him there
ahik,all of you place me here
ahin,put
ahin,place me
ahkamēyihtam,he keeps on thinking of what needs to be done
ahkamēyimoh,try harder
ahkamēyimōk,all of you try hard and persevere
ahkwachāw,it is frozen
ahkwakamin,it is a strong bitter liquid
ahkwan,it is painful
ahkwatihtā,freeze it
ahkwatin,it is frozen
ahkwātisōwin,the state of being difficult
ahpō,or
ahpō,either
ahtastā,place it elsewhere
ahtoskēwo' kamik,the band office
akahkway,blood sucker
akahkwayak,blood suckers leeches and snails
akawatamowin,a wish
akayāsemoh,speak english
akayāsemōwin,speaking english
akāwācikēwin,being enticed by something/someone
akāwāstēskamok,all of you shade it by standing before it
akihchike,count
akihcikēwin,performing numerical calculations
akihta,count those things
akihtamaw,count for him
akihtāsowin,a number
akihtāsowin,a figure
akihtāsōna,numbers
akihtāsōna,figures
akim,count them
akos,hang him
akoskôwahchikē,glue things together
akotā,hang it
akotā,hang it up
akwaha,pin it to the wall
akwahpisōwin,a act of putting on a bandage
akwamohcikēwin,applying something
akwana,cover him
akwanahikana,covers for something
akwānahā,cover it
akwâna,take it out of the liquid
amaciwēnēkānohtēwin,leading the way up
amisk,a beaver
amiskosākahikan,beaver lake
amiskwak,beavers
amiskwayān,beaver pelt
amiskwayāna,beaver pelts
amiskwayiwa,beaver tails
anāskāna,sheets
anikwacās,squirrel
aniskamanak,buttons
apacihcikan,something useful
apacikcikana,tools
apahkwācēsak,bats
apāchih,use it referring to an animate object
apēhtāwsēyaw,a waist
apēhtāwsēyaw,mid-section of human body
apēw' kamik,a living room
apih,sit
apihkāta,braid it
apihkē,make a braid
apihkēwin,weaving
apihkēwina,braids
apihtāpiw,he has a bruised eye
apik,all sit
apiscacihkos,pronghorn
apisesiw,he is small
apisēsiw,he is small
apitān,let's sit down
aposōyahtikwa,teepee poles
apoy,a paddle
apoyak,shovels
apoyak,paddles
apwēsiwin,being sweaty perspiration
asahpicēkēwin,bindings
asahpicēkēwin,making bundles
asam,feed him/them
asamās,feed him a little
asamāw,he is fed
asamēna,again
asawāpam,be on the look out for him
asāhpis,tie them together
asci,also
asci,too
asēn,refuse him
asēn,do not take him
asēna,refuse it
asēpita,pull it backwards
asēsina,the front upper part of a moccosin
asikan,a sock
asikanak,more than one sock
asikanak,socks
asinēyak,rocks
asiniysisak,pebbles
asiniysisak,rocks 
asiniywaciya,mountains
askāhtik,a green tree
askāw,sometimes
askāw,rarely
askāw,occasionally
askāwewan,open water during spring break up
askihk,a pail
askihk,a bucket 
askihkohkānis,a motor
askipahkwēsikan,flour
askipwāw,a potato
askipwāwa,potatoes
askiwiyās,a piece of raw meat
askiy,earth
askō,follow him
asonē,in particular
asonē,especially him now or then
asotamowin,a promise
asotamowin,a vow
asowacikan,a container
asowacikan,a pocket
asowacikan,a bin
asowatā,put it in a container
asōwa,put him in a container
asōwatāw,he put it in
asōwatēw,it is contained in a container such as pocket/dresser/drawer
aspapōwin,a riding saddle
aspihci,instead of
aspin,since
aspinikan,a pot holder
aspitahkoskākan,a rug
asta,place it
asta,put it
astawēha,put the fire out
astawēna,put the light out
astawēska,put the fire out by stepping/stamping on it
astotina,hats
aswēhta,beware of something
aswēyim,beware of him
as'pēyimoh,depend/rely on him
atamiskaw,shake hands with him
atamiskākē,greet people by shaking hands
atamiskākēwak,they are shaking hands with others in greeting
atawēyihta,reject it
atāmēw,he bought from him
atāmihk,all of you buy from him
atāmihkok,all of you buy from them
atāmin,buy from me
atāwākē,sell it
atāwākēk,all of you sell it
atāwewikamikwa,a store
atāwē,buy it
atāwēk,all of you buy it
ate,on the way
atē,on the way
atimapi,sit with your back to me
atimapik,all of you sit with your back to me
atoska,have him work for you
atoskaw,work for him
atoskāta,work on it
atoskehkēk,all of you work later
atoskē,you work later
atoskēwin,work
atoskēwin,working
awa,this one
awas,go away
awasita,over further
awasita,move over
awasitē,further away
awasitē,beyond
awatā,haul it
awatā,haul those
awēna,who?
awēnāna,who is that one
awēna ēkwāna,who is that one
awēnāwa,who is this one
awēta,here he is
awēte,here he is over here
awēyak,someone
awih,loan it to him
ayah,redirectional response
ayahci (prefix),different
ayahci (prefix),differently
ayahk,a redirectional gesture
ayamihā,verb command speaking to one person
ayamihāwin,praying
ayamihāwin,worshipping
ayamihēw kēsikāw,sunday
ayamihtā,read it
ayā,have it
ayewinisā,clothing
ayēkipēsim,april (frog moon)
ayēwinisā,clothing
ayikisis,a baby frog
ayinānēw,number five
ayinānēwosāp,number eighteen
ayisk,because of
ayiwāk,more
ayiwēpi,have a rest
ayōskan,a raspberry
ācahkōs,a star
āchimok,all of you tell a story
āchimow,he told a story
ācosisāk,arrows
āhāsiw,a raven
āhāsiwak,ravens
āhkosēw' kāmik,a hospital building
āh?,what?
ākosimowin,nestling
ākwāskaw,you head him off
ākwāskaw,head him off
ākwâha,take it out of the liquid
āmachōwē,you climb
āmiskōs,baby beaver
ānwehtaw,disbelieve him
ānwihtawēw,he disbelieves him
āpahah,unscrew it
āpēhoh,do something in return such as an act of kindness revenge or a joke
āpēwina,places to sit
āpēwina,seats
āpihkona,untie it
āpihtā (prefix),half
āpisimōsak,deer
āsastā,pile those things up
āsay,already
āskiya,muskeg moss used in diapers
āsotamōwin,making a vow
āstam,come here
āstisak,gloves
āstotin,a hat
āta,even though
ātawiya,anyway
ātawiya,however
ātawiya,although
ātawiya,as well
ātayohkaw,tell legends to him/them
ātiht,some
ātiht,a few
ātimapi,sit with your back to me
ātimwak,dogs
ātos,have him do something for you
āwasōwin,warmnig up
āyētaw,on both sides
āyētaw,at both ends
cahcahkaha,keep poking at it
cahcahkinosēw,a greyling
cahcahkinosēw,a speckled trout
cahcāmōwin,sneezing
cahka,poke him
cahkāha,poke it
cahkās,ice cream
cahkin,poke him with a finger
cāh (prefix),keep doing something over and over again
ce,a question marker
cēka,chop it
cēkaha,chop it
cēkahikan,an axe
cēki,near
cēki,nearby
cēpatahikē,cook it over the fire using a long stick usually bannock/meat
cēsi,fool him
cēsihiwēwin,deception
ocēsimiwēw,fibber
cēsimiwēw,fibber
cēskwa,wait
cēsta,poke him
cēstahikan,a fork
cēstin,scratch him to do harm
chēpataha,drive it into the ground usually means a pole/stick
cihcēkin,scratch him to relieve an itch
cihcēkinin,scratch me to relieve an itchy area
cihcēkwahcikē,eat/knaw the meat off of the bone
cikāstēpayihcēkan,a television
cipahikanis,one minute
ekay wiya,don't you dare
ekay,don't
ekaya,don't
ekoni,those are the ones
ekonihi,those are the ones
ekosāni,and so
ekosēsi,never mind
ekosēsi,the the way to do it like that just so
ekospēhk,then
ekote,over there
ekōsani,and so
ekōsi,that's it that's the end
etahkōmēw,the way he is related to the 3rd person
ewako ohci,that's the reason why
ewako,that one
ēko,that one
eyik,an ant
ēci,at a later time
ēci,afterwards
ēci,later
ēkatē (prefix),aside
ēkihceyihta,respect it give it proper respect
ēki,past tense prefix
eki,past tense prefix
ēkonik,those are the ones
ēkotōwa,that kind
ēkwa,and also
ēkwah,you come along too
ēkwayāc,only now
ēkwayāc,for the first time
ēkwāna,that's him
ēkwānima,that is the one inanimate thing
ēmihkwānis,a small teaspoon
ēmihkwānisak,spoons
ēsa,ago a particle that shows past tense
ēsi,this is a particle towards
ēsi (prefix),how to
ēsko,until
ēsko,so far
ēsko,as far as
ētamahcihow,how he feels
ētikwē,i suppose
ēwako āwa,this is the one this is him
ēwē,to indicate a future tense to any verb
ēwēh,to indicate a future tense to any verb
ēyiwēhk,anyway it's better than nothing
hay! hay!,exclamation indicating thankfulness
hey! hey!,exclamation of deep concern
ihkwā,a louse
ihtakon,it exists
ihtakow,he exists
ikamā,not so
isēhōw,he is dressed so
isihcikātōwin,business affairs
isihkāsow,that is his name
isihtāw,that's the way he makes it
iskipēw,high water
iskona,save some of it
iskona,leave some of it
iskonikan,something that is held for another day
iskonikan,a reservation
iskotēw' kamik,a firehall building
iskwayāch,the last
iskwayāch,final
iskwayāch,the end of it all
iskwēw,woman
iskwēwak,women kind
iskwēwowin,being womanly
iskwēwowin,womanhood
ispahtāw,he runs there quickly
ispayin,it happened
ispāyiw,it got to be that way
ispiciw,he moves there belongings and all
ispimihk,high above
ispimihk,way up high
itāpow,he takes a look
itātisiw,his conduct/behavior is so
itāw,it is said of him
itēyihta,think it to be so
itisa,send him
etohta,take him there
itohta,take him there
itohtatā,take it over there
itohtē,go there
itōhōw,he lands on the ground
itōhōw,he descends as a bird
itōta,do it
ētōta,do it
itwa,point to him
itwē,verb command
itwēw,he says
iyāyaw,he would rather
iyāyikohk,heaven only knows how much
iyāyitē,where no one knows
iyikohk,when the time comes
iyikopiwipēsim,november (frost moon)
iyinesowin,being smart
iyinesowin,with wisdom
iyiwehk,might as well signifies a person overdoing something despite his wishes
ka wayēsimiht,when a person is persuaded by flattery
kahcitina,get a hold of it
kahcitina,seize it
kahcitina,catch it
kahkan,something in good condition not broken inanimate object
kahkākow,a crow
kakē,can you
kahke,can you
kahke,do you think you can
kakē,do you think you can
kahke,will you
kakē,will you
kahkē,can you
ka kē,can you
kahkē,would you
ka kē,would you
kahkē,could you
ka kē,could you
kahkēwak-ohkē,make dry meat
kahkēwak-ohkē-k,all of you make dry meat
kahkihtwām,over and over again repeatedly
kahkominakāk,pepper
kahkwēyihtam,he is jealous
kah!,oh I see that's it
kah-kēyāskōw,he is repeatedly telling lies/fibs
kah-kimōwan,it continually rains periodic showers it keeps on raining
kah-kitow,calls repeatedly
kakatāch,preferably seems in negative way
kakāyawisiw,industrious
kakāyawisiw,works hard
kakē -ayāwāw,you can have him
kakēpātis,a stupid person
kakēpātis,a moron
kakēskim,turn him around counsel
kakwecihkemowina,asking
kakwecihkemowina,inquiring
kakwē (preverb),try to
kakwēcihkēmōwin,asking
kakwēcihkēmōwin,inquiring
kakwēyāhiwin,hurrying
kakwēyāhōwin,hurrying
kamik (suffix),for any kind of building
kanakē,at least
kanakēs,for a brief moment
kanawapokewin,keeping and guarding a house
kanawāpahta,look at it
kanawāpam,look at him
kanawēyihta,keep it safe
kanawēyim,keep him
kanācih,clean him up
kanācih,clean it up
kanātastēw,clean
kanātatisōwin,a quality held to be of great moral value
kanātisiwin,cleanliness
kanātisi-w,clean person
kanwapokēwin,keeping and guarding a house
kapēsiw,he sleeps/camps overnight
kapēsiwin,a camp
kapēsiwin,a resting spot
kapēsiwin,a campground
kapēyayihk,during all during the course of
kasēcihceēwin,wiping/washing your hands
kaskam,shortcut
kaskatinōwipēsim,october (freezing moon)
kaskāpahtew,it is smokey
kaskāpasam,he smokes it
kaskēyihtam,he feels alone and cut off from loved ones
kaskēyimēw,he/she is lonesome for her/him
kaskihēw,he convinces and makes him do something
kaskihow,he succeeds after much difficulty
kaskihtāw,he is able to do it 
kaskihtāw,he succeeds
kaskihtāwin,having the ability
kaskikātēsin,he broke his leg through a fall
kaskikwācikē,sew by hand paying attention to detail
kaskikwāsoh,sew by sewing machine
kaskikwāsowin,sewing
kaskim,convince him 
kaskim,persuade him
kaskimihk,all of you persuade him to agree
kaskina,break it off like a twig
kaskitēwacāpō,he has dark eyes
kawa,chop it
kawa,fall it down
kawisimo,stem kawi is fall
kawiwēpin,fall down throw
kayahtē,before
kayāsēs,a long while back
kayesowina,doing something deceitful
kayēsowin,doing something crooked
kayēyisiw,he is dishonest
kakayēyisiw,he is dishonest
kācikēwin,a hideaway
kācikēwin,hidden
kāhkiyaw,all of it
kāhkiyaw,the full amount
kākēcihiwēwin,consoling
kākēcihiwēwina,placating
kākēhcisāyāwin,being in the state of vulnerability
kākēsimōw,he is praying to the creator
kākwak,porcupines
kāmwātapiwin,sitting quietly and not moving
kāmwāteyihtākosiwin,being thought of as quiet
kāmwātisiw,he is quiet
kāmwātisiwin,quiet in a person 
kāmwātisiwin,gentleness
kām¯wātan,it is quiet
kās,hide him
kāsēcihcē,wash your hands
kāsēcihcēw,he washes his hands
kāsēha,wipe it
kāsēhkwankān,a face cloth for washing
kāsēyākanē,wipe the dishes
kāsihkwē,wash your face
kāskaha,scrape it
kāskina,break it off
kāskipāsōw,he shaves
kāskipāsōw,he is shaving
kāsō,hide
kāsōw,he hides
kātā,hide it
kātāk,all of you hide it
kāwih,again
kāya,don't
kāyawātisiw,good hard worker
kāyawiya,do not
kāyawiya,don't
kāyān,you can have it
kāyāwāw,you have him
kikāyāwāw,you have him
kehcinahōw,he is certain
kehcinahōw,he is sure
kehcinā,for sure
kehcinā,certainly
kehcinā,surely
kehcināho,make certain 
kehcināho,be sure
kehitwēw,he said
kehkwāhākēsis,a small wolverine
kehkwāhākēsis,a young one
kekway,what
kepihtinkewin,the state of withholding animate/inanimate objects
kēci,one of your kind
kēcikon,take it off
kēcikona,take it off
kēhokēwin,visiting
kēhsāspinē,might as well
kēhsēyihtam,he makes up his mind
kēkā -mitātaht,number nine
kēkāc,almost
kēkāc,nearly
kēko,which one of what type
kēkway,something
kēmōcinākosiw,she/he is sneaky
kēpa,soon
kēsastā,finish setting things in place
kēsāc,now instead of later
kēsi (prefix),finishing
kēsi (prefix),completing
kēsiska,make it on time 
kēsiska,beat the deadline
kēskahamā,cut your hair
kēskasākay,a skirt
kēskasākaya,skirts
kēskicāsis,a pair of shorts
kēskisa,cut it off
kēso (prefix),warmth
kēsōsōwin,the state of being warm
kēspin,if in case
kēspinata,earn it
kēstawāw,all of you too
kētahtawē,sometime if
kētasikanē,take off your socks
kētaskisinē,take off your shoes
kētastotinē,take off your hat
kēwācawasis,an orphan child
kēwē (prefix),was intending to
kēyanaw,us
kēyanaw,we
kēyiwēhk,that will help 
kēyiwēhk,that's better than nothing
kēyokē,visit
ki (prefix),your
kihcē pēkiskwēwin,speaking the truth
kihcēyihta,to receive/give an eagle feather is to show honor
kakihcēyihta,to receive/give an eagle feather is to show honor
kihci (prefix),greatness
kihci (prefix),importance
kihēwak,eagles
kihkahtoskōwak,they are always quarreling they are argumentative
kihkahtōwak,they are quarreling
kihkām,scold him
kihkāmāw,he is scolded
kihkāmēw,he scolded him
kihkāmin,scold me
kihpē- (prefix),came and
kihtimikan,a lazy person
kikawacin,you are cold
kimōtiw,he steals
kimōtiw,he stole
kinosesis,baby fish
kinosēw,fish (one fish)
kinosēwak,fish (plural)
kinwēs,for a long time
kipaha,shut it
kipaha-kitōn,shut your mouth
kipatahtam,faints
kipatahtam,fainted
kipē,you have come to
kipiskam,she blocks the way
kipiskaw,block him
kipōyon,you have quit
kisāstaw,sort of
kisāstaw,kind of
kisāstaw,it seems like
kisēpēkinīkēwin,doing laundry
kisēpēkinīkēwin,washing clothes
kisēpiyākanē,wash the dishes
kisikwatiw,he/she is heavy
kisin,it is cold
kisinpēsim,cold month
kisiwāsōw,he is angry
kisiwāsōwin,angry
kiskēciwān,flowing rapidly
kiskēsik,your eye
kiskinohamakosiw,school
kitahamaw,tell him not to
kitahamākē,counsel forbid by word of mouth
kitayān,you have it
kitā,eat all of it
kitātsōwin,your behavior
kitimākēyim,be kind to him
kitimākēyimiso,be kind to yourself
kitimākinaw,have pity on him
kitimākinaw,sympathy for him
kitimākinākē,sympathize with others
kitohcikan,a radio
kiyapiko,only you
kiyām,let it be it's all right
kiyāmāta,although
kiyāmāta,even though
ki-pe (prefix),you come to
kohkōsak,pigs
kohtaskway,windpipe
kotak,another
kotaka,others
kōhkomināw,a watermelon
kōna,snow
kōtakak,other living beings such as people/dogs/animals
kwāskohti,jump
kweyask,it is right/correct/straight
kwētāmāwin,hardship and not having anywhere to turn
kwēyāho,hurry up
kīmōwanāpoy,rainwater
ma,always doing
mah,always doing
macātisēwin,violence
macātisiwin,villainy
macātisiwin,vindictiveness
maci,bad
maci,wicked
maci,evil
macostēha,throw it in the fire
mahēhkān,wolf
mahikansak,baby wolves
mahtāmin,a corn
mahti,let me pass please
mamihcim,praise him
manācih,treat him with respect
manācihitok,treat each other with respect
manicôs,bug
manicôs,worm
manisa,cut it
manitō kēsikāw,a catholic concept
mansosowin,cutting oneself
masinaha,write it
masinahikē,write
masinahikēwin,writing
masinipayowin,a picture
maskehkēwāpoy,medicine fluid
maskihkēw' kamik,a medical clinic
maskisin,shoe
maskisina,shoes
maskosis,a bear cub
matōwehtākosōwin,sounding like a cry
matwānche,i wonder
matwānche,i don't know
mayahtihkowayan,sheep skin
mayaw,as soon as
mācē,hunt
mācēk,all of you go hunting
māci,a start of something
māci,means to start
mācihtā,start it
mācika,so
mācika,therefore
mācika,for that reason
māh,hark
māh,listen
māka,but still
mākwā,loon
māmaskātamowin,wonder and amazement
māmawi,altogether in a group
māmākwahcikē,chew on your food
māmāsēs,in a careless manner
māmāsēs,carelessly
māmāsēs,not thorough
māmihci,make him proud
māmitonēyihta,think it over
māna,usually
māna,used to
māna,generally
māskisina,shoes
māskōch,it's likely perhaps
māskwak,bears
mātoh,cry
māyacihkos,a small sheep
māyatihkwak,goats
māyatōtamōwin,a villainous conduct
māyi,prefix
māyipayiwin,in a state of woe
mekisihkahcikē,bead
mescacākansak,coyotes
metonē ka kāyāwsēwin,very lively and energetic
mēci,eat it
broth,soup
mēcimāpoy,soup
mēkwā (prefix),now
mēkwā (prefix),during
mēkwā (prefix),while is is happening
mēkwāc,presently
mēkwāc,meanwhile
mēkwāc,right now
mēna,and
mēna,again
mēnisihkān,grape
mētawē,play
mētāwew' kamik,third person plays building
mēyo ayāwin,being in good health
mēyo ayāwin,being well
mēyokēkway,a good thing
mēyonākosiw,he looks good
mēyosēhōwin,being well dressed/groomed
mēyoskamin,spring
mihcētwāw,many times
mihcētwāw,often
mihcētwāw,frequently
mihkoskātāsk,a red beet
mihkwāpoy,red watery liquid
mihtih,a piece of firewood
mikisowipēsim,february (eagle moon)
mināhin,give me a drink
minēkwācikana,cups
minihkwācikan,a cup
minihkwē,drink
minōsak,cats
minōsis,a kitten
misawāc,at any rate
misawāc,any way
misi (prefix),big
misi (prefix),large
misipisiwak,cougars
misiweyahtik,a log
misiweyahtik,plank
misiwē,all over the place
misiwētē (noun),everywhere
miskotākaya,jackets
miskwamiy,ice
miskwāmē,ice
mistahi,a lot
mistahi,a great amount
mistahi,much
mistamēk,whale
mistatim,a horse
mistatimwak,horses
mistayāpēw,big bull moose
mistik,a piece of wood
mitās,pants
mitāsak,pants
mitātaht,number ten
mitoni,very
mitoni,completely
mitoni,thoroughly
mitoni,a lot
mitâsak,pants
moscosisak,calves
mosis,out in the open
mostosak,cows
moya,no
namoya,no
mōniyāskwēw,a white woman
mōswa,a moose
mōw,eat it
mwēstas,later
mwēstas,sometime later
na (prefix),continuously
naci,prefix means getting
nah,command meaning here
nahew,talented
nahew,skillful
nahēyikohk,just right
nahēyikohk,evenly
nakē,stop
namakekway,nothing
namēkos,trout 
namēkōs,a type of fish
namoya,no
namoya,not so
namwac,not at all
nanāskomōw,he gives praise and thanks
napēch,short form of nānapēch
naskwahamākē,sing in accompaniment
naspāci,acting contrary to expectations
nawach,preferably
nawach piko,prefer only
nayāhta,carry it on your back
nayestāw,only
nayestāw,it keeps happening all the time
nāh,exclamation used to stress a negative response
nānapawishk,why now when it should have been done before
nānapēc,and finally done but imlies it is too late
nānapoh,the both of them
nānitaw,somewhere about
nāta,go get it
nātamaw,get it for him
nāway,the past
nāway,behind
nā?,question marker expression like huh
nehiyawē,speak cree
nehtāciwēcowan,go down the hill
nepisēyāhtik,a willow branch/stick
newo kīsikaw,thursday
nēci,prefix means me with somebody else also my
nēhi,those things that are inanimate
nēmanēta,there it is
nēmāh,take a lunch along
nēmihto,dance
nēpawi,stand up
nēpin,it is summer
nēso,number two
nēsohkamaw,be of assistance to him
nēsohkamaw,help him
nēsosāp,number twelve
nēstānaw,number twenty
nēstōhāhcēhōwin,weariness
nēstōsēwin,state of being tired
nēstwāyāwin,being dispirited/tired
nēta,right there
nētē,over there
nēwo,number four
nēwosāp,number fourteen
nēyanan,number five
nēyananosāp,number fifteen
nēyānān,we
nēyānān,us
ni,prefix
nihtā (preverb),knows how to
nihtā (preverb),is good at
nihtā (preverb),expertness
nika (prefix),i will
nikamōh,sing
nikotwāsi kīsikāw,saturday
nikotwāsik,number six
nikotwāsi'sāp,number sixteen
nikâwe,my mother
nimis,my older sister
nimosôm,my grandfather
nipā,sleep
nipāw' kamik,a place for sleep structure
nipē,water
nipēwāpoy,watery liquid
nipēwin,a bed
nisitohta,understand it
niskak,geese
niskā,goose
niskipēsim,march (goose moon)
nistam,at first the first
nisto,number three
nistosāp,number thirteen
nitaw,go and do/get/act
nitotamāw,he asked to be given something
nohkom,grandmother
nohtē,would like to
nohtē,wants to
nohtâwe,my father
nomoya wihkac,never
notokwēw,old woman
nōcikwēsiw,the old woman
nōsēmahkēsis,a female fox
nōsēmahkēsis,a vixen
nōtinkākān,a weapon
nīkāmōwin,singing
nīkāmōwin,a song
nīsto kīsikaw,third day
nīyāno kīsikāw,friday
o- (possesive prenoun),his/her
o- (preverb),third person
ohcitaw,something done on purpose
ohcitaw,deliberately
ohpēw,he leaps
ohphōwipēsim,august (flying moon)
ohpikin,it grows
ohpikiw,he grows up
ohtēsikēwin,boiling water
okehkwahakēs,an adult wolverine
okinēy,a tomato
omātōw,a weeper
onikohtēw,a woodcutter
onōcihitowipēsim,september (mating moon)
opaskawēhopēsim,june (egg hatching month)
osām,because
osām (prefix),too much
osāwās,an orange
osāw'pihēsēs,yellowbird
osihtā,make it
osihtā,fix it
oskātāsk,a carrot
oski (prefix),young
oski (prefix),new
oskinikiskwew,a young woman
otahōwēw,a winner
otahōwēw,won
otatoskēw,an industrious worker
otēhimin,strawberry
otēhipak,a cabbage
owāstāhikēw,a waver
oyēh,at the time when
oyēh,back then
ōhi,these things here
ōhōwak,owls
ōhtēwāpoy,boiling water
ōki,these living things here such as these cars and these cats
ōma,this
ōskēsēhōwin,wearing new clothes
ōta,here near you
ōtāpihkēw,a weaver
ōtē,over here said to someone far away
ōyēh,back then at that time when
pa (prefix),over and over again
pahkēkinosākay,moosehide jacket
pahkēkinosākay,a jacket
pahkin,skin him
pahkinikē,skin him
pahkopē,walk in the water
pahkopēk,all of you walk in the water
pahkopēwin,walking in the water
pahkwēsikan,bread
pahpāhsces,woodpecker
pahpētos,it all differs
pahpētos,in different ways
pahpi,laugh
pahpiskich,in separate parts
pakowayān,shirt
pakwahtēhon,a belt
pakwahtēhona,belts
pakwātikōsēwin,being morally hateful
pamēpicēwin,long journey from camp to camp
pamihcikē,drive the vehicle
papāmih,around
papāmih,about
papami,around
papami,about
pa-pamōhtēw,she/he is walking/traveling every where
pāhkwayākan,a dish towel
pākahkām,perhaps it is very likely
pāsci,over
pāschi,over
pāstēwahtik,a piece of dried wood
pekiskwās,speak to him
peyakwayih,one of the same pair
pē (prefix),come and
pēh,wait for him
pēhcōnēs,a blouse
pēhoh,wait
pēhok,wait (plural)
pēhowin,waiting
pēhowin,a waiting place
pēhta,verb command
pēhtākōsiwin,being heard while talking
pēkiskwewina,words
pēsimohkān,clock
pēsimohkānis,a watch
pēsimohkānis,spears 
pēsimohkānis,long sharp sticks
pēsiw,bring him
pēw' kistikāna,vegetables
pēyak,number one
pēyakosāp,number eleven
pēyakwayak,in one place
pēyakwayak,in one location
pēyakwāw,once
picēkwās,an apple
picih,move to another place
pihēsēsak,baby chicks
pihkahcēwāpōs,coffee
pihtaw,because of
pihtawētāsān,middle
pihtikwē,enter
pihtikwē,come in
pihtwā,have a smoke
piko,only
piko,solely
piko,alone
poko,only
poko,solely
poko,alone
pikwēspēhk,at any given time
pikwēta,anywhere there
pikwētē,anywhere all over
pimātisi,live
pimēy atāwēw' kamik,a gas station building
pimich,on the side
piminawasow' kamik,a kitchen
pimipahtā,run
pipon,it is winter
piponasākay,a winter jacket
piponasākaya,winter jackets
piponasksisina,winter boots
pipon' asākay,winter coat
pipon' asākay,jacket
pisastēhikan,a whip
pisisak,baby cougars
piweyihtamowin,thinking something is worthless
poko,have to
piko,have to
poko,must
piko,must
poko,for sure
piko,for sure
poko,except that
piko,except that
ponihtā,leave it alone
pōna,make a fire
pōna,add wood to the fire
pōnāyamihēw kēsikāw,monday
pōnēyim,stop talking and discouraging him
pōni (preverb),stops
pōni (preverb),finishes
pōnih,leave him alone
pōsihtā,load it on
pōsihtā,carry it on board
pōsik,all of you get on board
pōtōma,this is what it became
pwākomowin,vomitting
pwākomowin,vomit
sakāw,a forest
sakāw,wooded area
sakāwēyiniw,bushman
sapopēwin,wetness
sākahikan,a lake
sākēwēw,he comes into view
sākih,love him cherish him
sāsākowāpiskos,chipmunk
sēhkos,a weasel
sēkahikākan,a ladle
sēkahikākana,ladles
sēkipatwā,have/put braids on
sēmāk,right away
sēmāk,now
sēmāk,immediately
sēmāk,at once
sēnikēwin,wringing out liquid from clothes
sēsēp,a duck
sēsēpak,ducks
sēsēpaskihk,a kettle
sēsēpisisak,ducklings
sēstakwaya,wool
sēstakwaya,woolen articles
sēwāpoy,a soft drink
sēwāpoy,pop
sēwāpoy,sweet liquid
sēwihtākan,salt
simākanisēw' kamik,a police station building
sipwehtē,go away
sipwehtē,leave
sohkakihtēw,it is expensive
soniskwatahikēwkamik,skating rink
sōhktisiwin,being strong
sōhktisiwin,having inner strength
sōminahtik,a vine like plant
sōminapoy,wine
sōniskwātahikēw' kamik,a skating arena building
sōskwāch,might as well proceed just as well
ta,always
tah,always
ta,keeps doing
tah,keeps doing
tahkascēkana,fridges
tahkascikan,a fridge
tahto (prefix),each and every
tahtokēsikāw,each and every day
tahtotipiskāw,each and every night
tahtwayisiyniw,every person
tahtwayisiyniw,each person
tahtwāw,each time and every time
tahtwāwiyak,each one
tahtwāwiyak,every one
tako,in addition to:
takwahhiminā,chokecherry
takwamohcikan,an instrument used to clamp things together
takwākin,it is autumn
tanehki?,why
tanihi,where are they
tapasē,verb command
taspwāw,therefore and so
tāhkāmāpoy,cold water
tāhkōhch,on top of building/hill/house
tāna,which one
tānanima,which one
tānēhkanima,why is it
tānihi,which ones
tānimayikohk,how much
tānisēkwa,and how are you
tānisi,how are you
tānispēhk,when
tānita,where is it at
tānitahto,how many
tānitahtwāw,how many times
tānitē,where?
tāniwā,where is she/he
tāniwehkāk,where are they
tāniwē,where it it
tāniwēhā,where are they
tānsāwa,what is it with him/her
tānsēsa,how was it
tāpiskōch,just like
tāpiskōch,as
tāpiskōch,equally
tehtapiw' askisina,he/she rides boots
tēpakohpōsāp,number seventeen
tēpakohpwāw,seven times
tēpakōhp,number seven
tihtipahpinewin,rolling in pain
tipāpiskōcikan,a weigh scale
tipiskāki,when it gets dark
tohtōsāpoy,milk
wa- (prefix),repeatedly/always/continuously
wapiskatim,a white dog
wawēsēw,he is well dressed
wawēyēw,he is getting ready to go out
wawiyas,it is funny
wayawēw' tēhtapowin,an outhouse
wayāwēw' kamik,a washroom/bathroom
wāhiyāw,far away
wāpim,see him
wāpiskipahkēkin,a prime white hide
wāpiwin,the ability to see
wāposak,rabbits
wāsakām (prefix),all around an object/area 
wāsaskotēnikan,a lamp
wāsaskotēnikan,lightbulb
wāskesiwak,elks
wāskēsōw,elk
wāstāhikēwin,waving one's hand
wāwēs,especially
wāwi,an egg
wāwiyak,too much
wāyipēyāw,waterhole
wēkihtōwin,wedding
wēkinikan,wrapping cloth/paper
wēkiw,he lives in a house
wēpayōwēwin,wagging the tail
wēpin,throw him away
wēpina,throw it away
wēsakacihp,groundhog
wēsakacihp,woodchuck
wēskacān,a whiskey jack
wēyas,meat
wēyatwēwin,wit and humour
wēyākan,a dish/plate
wēyākanēw-kisēpēkinikan,dish soap
wihcēkaskosēy,an onion
wihkāch,ever
wihpēm,sleep with him
wihtaskāta,sing words into a native song
wihtāmaw,tell him
wiya or,the third person
wiyawāw,they
wiyawāw,theirs
wiysta,him too
wiysta,he also
ya,always
yah,always
ya,keeps doing
yah,keeps doing
yōtin,wind
yōtin,it is windy
achimok semâk,all of you tell a story now
